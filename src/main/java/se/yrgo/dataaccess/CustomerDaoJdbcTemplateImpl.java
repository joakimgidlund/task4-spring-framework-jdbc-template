package se.yrgo.dataaccess;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import se.yrgo.domain.Call;
import se.yrgo.domain.Customer;

@SuppressWarnings("java:S3008")
public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
    private static final String PASSWORD = "";
    private static final String USERNAME = "sa";

    private static final String DRIVER_NAME = "org.hsqldb.jdbcDriver";
    private static final String DATABASE_URL = "jdbc:hsqldb:file:database.dat;shutdown=true";

    private static String CUSTOMER_DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static String CUSTOMER_UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME=?, EMAIL=?, TELEPHONE=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static String CUSTOMER_INSERT_SQL = "INSERT INTO CUSTOMER (COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?, ?, ?, ?)";
    private static String CUSTOMER_GET_BY_ID = "SELECT COMPANY_NAME, EMAIL FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static String CUSTOMER_GET_BY_NAME = "SELECT COMPANY_NAME, EMAIL FROM CUSTOMER WHERE COMPANY_NAME=?";
    private static String CUSTOMER_GET_FULL_DETAIL = "SELECT * FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static String CALL_INSERT_SQL = "INSERT INTO CALL (CUSTOMER_ID, TIME_AND_DATE, NOTES), VALUES(?, ?, ?)";

    private JdbcTemplate template;
    
	public CustomerDaoJdbcTemplateImpl(JdbcTemplate template){
		this.template = template;
	}

    public void createTables() {
        try {
            this.template.update("CREATE TABLE CUSTOMER (CUSTOMER_ID VARCHAR(5), COMPANY_NAME VARCHAR(255), EMAIL VARCHAR(255), TELEPHONE VARCHAR(20), NOTES VARCHAR(255))");
            this.template.update("CREATE TABLE CALL_TBL (CALL_ID integer generated by default (start with 1), CUSTOMER_ID VARCHAR(5), TIME_AND_DATE DATE, NOTES VARCHAR(255))");
        } catch(org.springframework.jdbc.BadSqlGrammarException ex) {
            System.out.println("Assuming the table exists, or grammar error.");
        }
    }
    @Override
    public void create(Customer customer) {
        template.update(CUSTOMER_INSERT_SQL, customer.getCompanyName(), customer.getEmail(), customer.getTelephone(), customer.getNotes());
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return this.template.queryForObject(CUSTOMER_GET_BY_ID, new CustomerRowMapper(), customerId);
    }

    @Override
    public List<Customer> getByName(String name) {
        return this.template.query(CUSTOMER_GET_BY_NAME, new CustomerRowMapper(), name);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        this.template.update(CUSTOMER_UPDATE_SQL, customerToUpdate.getCompanyName(), customerToUpdate.getEmail(), customerToUpdate.getTelephone(), customerToUpdate.getNotes(), customerToUpdate.getCustomerId());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        this.template.update(CUSTOMER_DELETE_SQL, oldCustomer);
    }

    @Override
    public List<Customer> getAllCustomers() {
        return this.template.query("SELECT * FROM CUSTOMER", new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        return this.template.queryForObject(CUSTOMER_GET_FULL_DETAIL, new CustomerRowMapper(), customerId);
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        this.template.update(CALL_INSERT_SQL, customerId, newCall.getTimeAndDate(), newCall.getNotes());
    }
}

class CustomerRowMapper implements RowMapper<Customer> {
	public Customer mapRow(ResultSet rs, int arg1) throws SQLException 	{
		String customerId = rs.getString(1);
		String companyName = rs.getString(2);
		String email = rs.getString(3);
		String telephone = rs.getString(4);
		String notes = rs.getString(5);

		return new Customer(customerId, companyName, email, telephone, notes);
	}
}
